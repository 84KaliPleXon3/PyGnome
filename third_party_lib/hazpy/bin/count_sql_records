#!/usr/bin/env python
"""Display record counts in a SQL database or compare two databases.

The record-count data structure (the ``target`` and ``control`` variables, and
the return value of ``get_counts``) is a dict of table names (str) to record
counts (int).
"""

from __future__ import print_function

import argparse
import csv
import sys

import sqlalchemy as sa

def get_parser():
    description = __doc__.splitlines()[0]
    parser = argparse.ArgumentParser(description=description)
    paa = parser.add_argument
    paa("dburl", metavar="DBURL", help="Target database URL (SQLAlchemy).")
    paa("dburl2", metavar="DBURL2", nargs="?",
        help="Control database URL (SQLAlchemy).")
    return parser

def get_counts(dburl):
    count = sa.func.count()
    engine = sa.create_engine(dburl)
    conn = engine.connect()
    md = sa.MetaData(bind=conn, reflect=True)
    ret = {}
    for tablename, table in sorted(md.tables.iteritems()):
        sql = sa.select([count], None, [table])
        rslt = conn.execute(sql)
        ret[tablename] = rslt.scalar()
    return ret

def report1(target):
    fmt = "{:<20} {:>7}"
    for tn in sorted(target):
        lin = fmt.format(tn, target[tn])
        print(lin)

def report2(target, control):
    fmt = "{:<20} {:>7} {:>7}"
    tablenames = set(target) | set(control)
    for tn in sorted(tablenames):
        count1 = target.get(tn, "--")
        count2 = control.get(tn, "--")
        lin = fmt.format(tn, count1, count2)
        print(lin)

def main():
    parser = get_parser()
    args = parser.parse_args()
    target = get_counts(args.dburl)
    if args.dburl2:
        control = get_counts(args.dburl2)
        report2(target, control)
    else:
        report1(target)


if __name__ == "__main__":  main()

