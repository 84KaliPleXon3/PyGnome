import json
import os

from collections import OrderedDict
import datetime

from webgnome.forms.base import DateTimeForm
from base import FunctionalTestBase


class ModelViewTests(FunctionalTestBase):
    fifteen_minutes = datetime.timedelta(minutes=15)

    def create_model(self):
        return self.testapp.post('/model/create', OrderedDict([
            ('confirm_new', True)
        ]))

    def get_model_settings(self):
        return self.testapp.get('/model/settings')

    def post_model_settings(self, **options):
        date = options['date'] if 'date' in options else datetime.datetime.now()
        options['date'] = date.strftime(DateTimeForm.DATE_FORMAT)

        defaults = dict(
            hour=date.hour,
            minute=date.minute,
            duration_days=1,
            duration_hours=0,
            uncertain=False,
            computation_time_step=self.fifteen_minutes.total_seconds()
        )

        defaults.update(options)

        return self.testapp.post('/model/settings', defaults)

    def run_model(self, **model_settings):
        resp = self.create_model()
        json_resp = json.loads(resp.body)
        self.assertTrue(json_resp['model_id'])
        self.post_model_settings(**model_settings)
        return self.testapp.get('/model/run'), json_resp['model_id']

    def test_create_model_without_existing_model_returns_new_model_id(self):
        resp = self.create_model()
        json_resp = json.loads(resp.body)

        self.assertTrue(json_resp['model_id'])
        self.assertEqual(json_resp['message'], {
            'text': 'Created a new model.',
            'type': 'success'
        })

    def test_run_model_returns_correct_expected_time_steps(self):
        start_date = datetime.datetime(year=2012, month=1, day=1, hour=1,
                                       minute=1)
        resp, model_id = self.run_model(date=start_date)
        json_resp = json.loads(resp.body)

        # Number of steps/images/timestamps == (duration / time_step) + 1
        # See Chris/Jasmine/Caitlin for why this is, or ``gnome.model.Model``.
        self.assertEqual(len(json_resp['expected_time_steps']), 97)
        self.assertEqual(
            json_resp['expected_time_steps'][0], start_date.isoformat())

    def test_run_model_returns_correct_background_image(self):
        start_date = datetime.datetime(year=2012, month=1, day=1, hour=1,
                                       minute=1)
        resp, model_id = self.run_model(date=start_date)
        json_resp = json.loads(resp.body)

        expected_url = \
            'http://localhost/static/img/%s/background_map.png' % model_id
        self.assertEqual(json_resp['background_image'], expected_url)

    def test_run_model_returns_correct_first_step(self):
        start_date = datetime.datetime(year=2012, month=1, day=1, hour=1,
                                       minute=1)
        resp, model_id = self.run_model(date=start_date)
        json_resp = json.loads(resp.body)
        step = json_resp['step']

        self.assertEqual(step['id'], 0)

        expected_url = \
            'http://localhost/static/img/%s/foreground_00000.png' % model_id
        self.assertEqual(step['url'], expected_url)
        self.assertTrue('foreground_00000.png' in step['url'])

        self.assertEqual(
                step['timestamp'], json_resp['expected_time_steps'][0])

    def test_get_next_step_sends_next_time_step(self):
        start_date = datetime.datetime(year=2012, month=1, day=1, hour=1,
                                       minute=1)
        resp, model_id = self.run_model(date=start_date)

        # NOTE: Skip the first step, which was generated by /model/create.
        for step_num in range(1, 97):
            # The model run should end at step 96, returning a 404.
            if step_num == 97:
                resp = self.testapp.get('/model/next_step', status=404)
                self.assertEqual(resp.status, '404 Not Found')
                return

            resp = self.testapp.get('/model/next_step')
            json_resp = json.loads(resp.body)
            step = json_resp['time_step']

            expected_url = \
                'http://localhost/static/img/%s/foreground_000%02d.png' % (
                    model_id, step_num)
            self.assertEqual(step['url'], expected_url)

            expected_time = start_date + self.fifteen_minutes * step_num
            self.assertEqual(step['timestamp'], expected_time.isoformat())
